@using WowsKarma.Common.Models
@using static WowsKarma.Common.Models.PostFlairsUtils

@inject PostService PostService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


@if (Loaded)
{
	<div class="row justify-content-between align-content-end">
		<div class="col-auto mb-3">
			<AuthorizeView>
				<Authorized>
					@if (PostsDisable)
					{
						<h5 class="text-danger">You were banned from posting.</h5>
					}
					else if (AccountId == authorId)
					{
						<h5 class="text-info">You cannot self-post.</h5>
					}
					else if (CheckCooldown() is PostCooldownDTO postCooldown && postCooldown.OnCooldown)
					{
						<h5 class="text-info">You may post again for this Player after @postCooldown.EndsAt.ToString("dd/MM/yyyy @ HH:mm").</h5>
					}
					else
					{
						<button class="btn btn-success px-4" @onclick=CreatePost>New Post</button>
					}
				</Authorized>
				<NotAuthorized>
					@{ string redirectUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri); }
					<h5 class="text-warning">You must first <a href=@($"/login?redirectUri={redirectUri}")>login</a> before creating a Post.</h5>
				</NotAuthorized>
			</AuthorizeView>
		</div>
	</div>

	@if (PlayerPosts is null || PlayerPosts.Count() is 0)
	{
		<h4 class="text-warning mb-5">No Posts found for this Player.</h4>
	}
	else
	{
		<div class="row">
			@foreach (PlayerPostDTO post in PlayerPosts)
			{
				<div class="card border-@GetPostBorderColor(post.Flairs) my-3 mx-3" style="width: 20rem; max-width: calc(100vw - 2rem);">
					<h5 class="card-header">@post.Title</h5>
					<div class="card-body">
						<p class="card-text" style="white-space: pre-wrap;">@post.Content</p>
					</div>
					<div class="card-body py-0 my-1 flex-grow-0" style="line-height:normal">
						@{ PostFlairsParsed parsed = post.Flairs.ParseFlairsEnum(); }
						@if (parsed?.Performance is not null)
						{
							<small class="my-0 text-@(parsed.Performance.Value ? "success" : "danger")">@(parsed.Performance.Value ? "+" : "-") Performance</small><br />
						}
						@if (parsed?.Teamplay is not null)
						{
							<small class="my-0 text-@(parsed.Teamplay.Value ? "success" : "danger")">@(parsed.Teamplay.Value ? "+" : "-") Teamplay</small><br />
						}
						@if (parsed?.Courtesy is not null)
						{
							<small class="my-0 text-@(parsed.Courtesy.Value ? "success" : "danger")">@(parsed.Courtesy.Value ? "+" : "-") Courtesy</small>
						}
					</div>

					<div class="card-footer">
						<p class="blockquote-footer mb-0">
							<NavLink href=@($"/player/{post.AuthorId},{post.AuthorUsername}")>@post.AuthorUsername</NavLink>,
							@post.PostedAt.Value.ToString("dd/MM/yyyy @ HH:mm").
						</p>

						<AuthorizeView>
							<Authorized>
								@if (post.AuthorId == authorId)
								{
									<p class="mt-1 mb-0">
										<button class="btn btn-warning btn-sm" @onclick=@(() => EditPost(post))>Edit</button>
										<button class="btn btn-danger btn-sm" @onclick=@(() => InitDeleteModal(post.Id.Value))>Delete</button>
									</p>
								}
							</Authorized>
						</AuthorizeView>
					</div>
				</div>
			}
		</div>
	}

	@if (showEditorModal)
	{
		<EditorModal PostModel=currentEditorPost OnPostSubmited=EditorModalSubmitAsync OnCancel=EditorModalCancel />
	}
	else if (showDeleteModal)
	{
		<DeleteConfirm OnConfirm=DeleteModalSubmitAsync OnCancel=DeleteModalCancel />
	}
}
else
{
	<h3 class="text-info">Loading Posts...</h3>
}



@code
{
	public static readonly TimeSpan CooldownPeriod = TimeSpan.FromDays(1);


	[Parameter]
	public uint AccountId { get; set; }

	[Parameter]
	public bool PostsDisable { get; set; }

	[Parameter]
	public EventCallback OnPostsUpdate { get; set; }

	public IEnumerable<PlayerPostDTO> PlayerPosts { get; set; }

	public bool Loaded { get; private set; }
	private bool showEditorModal, showDeleteModal;

	private PlayerPostViewModel currentEditorPost;
	private Guid currentDeleteId;

	private uint authorId;

	public record PostCooldownDTO(bool OnCooldown, DateTime EndsAt);
	private PostCooldownDTO postCooldown;


	protected override async Task OnParametersSetAsync()
	{
		PlayerPosts = await PostService.FetchReceivedPostsAsync(AccountId, 0);

		await AssignAuthorId();

		await base.OnParametersSetAsync();

		Loaded = true;
	}

	private void CreatePost()
	{
		currentEditorPost = new();
		currentEditorPost.PlayerId = AccountId;
		currentEditorPost.AuthorId = authorId;

		showEditorModal = true;
	}

	private void EditPost(PlayerPostDTO post)
	{
		currentEditorPost = post;

		showEditorModal = true;
	}

	public async Task UpdatePostsAsync()
	{
		PlayerPosts = await PostService.FetchReceivedPostsAsync(AccountId, 0);
		await OnPostsUpdate.InvokeAsync();
	}

	private void EditorModalCancel() => showEditorModal = false;
	private async Task EditorModalSubmitAsync()
	{
		showEditorModal = false;
		currentEditorPost = null;
		await UpdatePostsAsync();
	}


	private void InitDeleteModal(Guid postId)
	{
		currentDeleteId = postId;
		showDeleteModal = true;
	}
	private void DeleteModalCancel() => showDeleteModal = false;
	private async Task DeleteModalSubmitAsync()
	{
		showDeleteModal = false;
		await PostService.DeletePostAsync(currentDeleteId);
		await UpdatePostsAsync();
	}

	private async Task AssignAuthorId()
	{
		AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		if (authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value is string accountUrl and not null)
		{
			authorId = GetAccountInfoFromOidcUrl(accountUrl).Id;
		}
	}

	private PostCooldownDTO CheckCooldown()
	{
		PlayerPostDTO lastAuthoredPost = (from p in PlayerPosts where p.AuthorId == authorId orderby p.PostedAt select p).LastOrDefault();

		if (lastAuthoredPost is not null)
		{
			DateTime endsAt = lastAuthoredPost.PostedAt.Value.Add(CooldownPeriod);
			bool onCooldown = endsAt > DateTime.UtcNow;

			return new(onCooldown, endsAt);
		}

		return new(false, default);
	}
}
