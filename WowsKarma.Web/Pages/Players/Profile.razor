@page "/player/{idnamepair}/"
@inject PlayerService PlayerService

@if (Player is not null)
{
	<h1 class="text-center mb-5">@Player.Username&emsp;<sup class="text-@GetKarmaColor(TotalKarma)">@TotalKarma</sup></h1>
	<div class="row justify-content-center text-center my-5">
		<div class="col-sm-4 m-4">
			<h4>Game :</h4>
			<h2 class="text-@GetKarmaColor(Player.GameKarma)">@Player.GameKarma</h2>
		</div>
		<div class="col-sm-4 m-4">
			<h4>Site :</h4>
			<h2 class="text-@GetKarmaColor(Player.SiteKarma)">@Player.SiteKarma</h2>
		</div>
	</div>

	
	<div class="row justify-content-between">
		<div class="col-md-4">
			<h2 class="text-center mb-3">Info</h2>

			<table class="table table-borderless">
				<thead />
				<tbody>
					<tr><th>Account ID :</th><td>@Player.Id</td></tr>
					<tr><th>Created On :</th><td>@Player.WgAccountCreatedAt.ToString("f")</td></tr>
					<tr><th>Last Battle :</th><td>@Player.LastBattleTime.ToString("f")</td></tr>
				</tbody>
			</table>
		</div>
		<div class="col-md-4">
			<h2 class="text-center mb-5">Ratings</h2>

			<div class="row justify-content-around text-center">
				<div class="col-4">
					<h3 class="text-@GetKarmaColor(Player.RatingPerformance)">@Player.RatingPerformance</h3>
					<h5>Performance</h5>
				</div>
				<div class="col-4">
					<h3 class="text-@GetKarmaColor(Player.RatingTeamplay)">@Player.RatingTeamplay</h3>
					<h5>Teamplay</h5>
				</div>
				<div class="col-4">
					<h3 class="text-@GetKarmaColor(Player.RatingCourtesy)">@Player.RatingCourtesy</h3>
					<h5>Courtesy</h5>
				</div>
			</div>
		</div>
	</div>



	<hr class="my-3" />
	<Posts AccountId="@Player.Id"/>
}
else if (Loaded)
{
	<h4 class="text-warning">Player not found.</h4>
}
else
{
	<h4 class="text-info">Loading...</h4>
}


@code {
	[Parameter]
	public string IdNamePair { get; set; }

	public int TotalKarma => Player.GameKarma + Player.SiteKarma;

	public PlayerProfileDTO Player { get; set; }

	public bool Loaded { get; private set; }

	protected override async Task OnInitializedAsync()
	{
		uint id = GetIdFromRouteParameter(IdNamePair);
		Player = id is 0 ? null : await PlayerService.FetchPlayerProfileAsync(id);

		await base.OnInitializedAsync();
		Loaded = true;
	}
}
